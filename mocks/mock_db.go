// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/muhammed.gultekin/GolandProjects/guestLedger/db/db.go

// Package mock_db is a generated GoMock package.
package mocks

import (
	sql "database/sql"
	models "guestLedger/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDatabaseActions is a mock of DatabaseActions interface.
type MockDatabaseActions struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseActionsMockRecorder
}

// MockDatabaseActionsMockRecorder is the mock recorder for MockDatabaseActions.
type MockDatabaseActionsMockRecorder struct {
	mock *MockDatabaseActions
}

// NewMockDatabaseActions creates a new mock instance.
func NewMockDatabaseActions(ctrl *gomock.Controller) *MockDatabaseActions {
	mock := &MockDatabaseActions{ctrl: ctrl}
	mock.recorder = &MockDatabaseActionsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabaseActions) EXPECT() *MockDatabaseActionsMockRecorder {
	return m.recorder
}

// GetAllMessages mocks base method.
func (m *MockDatabaseActions) GetAllMessages(page string) ([]models.GuestLedger, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllMessages", page)
	ret0, _ := ret[0].([]models.GuestLedger)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllMessages indicates an expected call of GetAllMessages.
func (mr *MockDatabaseActionsMockRecorder) GetAllMessages(page interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllMessages", reflect.TypeOf((*MockDatabaseActions)(nil).GetAllMessages), page)
}

// InsertGuestMessage mocks base method.
func (m *MockDatabaseActions) InsertGuestMessage(message models.GuestLedger) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InsertGuestMessage", message)
}

// InsertGuestMessage indicates an expected call of InsertGuestMessage.
func (mr *MockDatabaseActionsMockRecorder) InsertGuestMessage(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertGuestMessage", reflect.TypeOf((*MockDatabaseActions)(nil).InsertGuestMessage), message)
}

// createConnection mocks base method.
func (m *MockDatabaseActions) createConnection() *sql.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "createConnection")
	ret0, _ := ret[0].(*sql.DB)
	return ret0
}

// createConnection indicates an expected call of createConnection.
func (mr *MockDatabaseActionsMockRecorder) createConnection() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "createConnection", reflect.TypeOf((*MockDatabaseActions)(nil).createConnection))
}
